// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}


model users {
  id         String    @unique @default(uuid())
  userId     Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  password   String
  salt       String    @unique
  email      String    @unique
  role       UserRole
  otp        String?
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @updatedAt

  profile Profile?

  bills bills[]

  reservations reservations[]

  hotel_ratings hotel_ratings[]
}

model Profile {
  id         String    @unique @default(uuid())
  profile_id Int       @id @default(autoincrement())
  user_id    Int       @unique
  avatar     String?
  address    String?
  city       String?
  state      String?
  zip_code   String?
  country    String?
  user       users     @relation(fields: [user_id], references: [userId])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model hotels {
  hotel_id          Int               @id @default(autoincrement())
  name              String            @db.VarChar(100)
  address           String            @db.VarChar(255)
  city              String            @db.VarChar(50)
  country           String            @db.VarChar(50)
  phone             String?           @db.VarChar(20)
  email             String?           @db.VarChar(100)
  star_rating       Int?              // 1-5, enforce via application logic
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  hotel_descriptions hotel_descriptions[] // One-to-many
  hotel_ratings     hotel_ratings[]   // One-to-many
  room_types        room_types[]      // One-to-many
  rooms             rooms[]           // One-to-many
  reservations      reservations[]    // One-to-many
  room_hourly_rates room_hourly_rates[] // One-to-many

  hotel_images hotel_images[]
}

model hotel_descriptions {
  description_id Int      @id @default(autoincrement())
  hotel_id       Int
  hotel          hotels   @relation(fields: [hotel_id], references: [hotel_id], onDelete: Cascade)
  description    String   @db.Text
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model hotel_images {
  image_id   Int      @id @default(autoincrement())
  hotel_id   Int
  hotel      hotels   @relation(fields: [hotel_id], references: [hotel_id], onDelete: Cascade)
  image_url  String   @db.VarChar(255) // URL or file path to the image
  description String?  @db.VarChar(255) // Optional description (e.g., "Lobby view")
  is_primary Boolean  @default(false) // Flag for primary image
  createdAt  DateTime  @default(now())
}
model hotel_ratings {
  rating_id  Int      @id @default(autoincrement())
  hotel_id   Int
  user_id   Int
  hotel      hotels   @relation(fields: [hotel_id], references: [hotel_id], onDelete: Cascade)
  guest      users   @relation(fields: [user_id], references: [userId], onDelete: Restrict)
  rating     Int      // 1-5, enforce via application logic
  comment    String?  @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

// Room Types table
model room_types {
  room_type_id      Int               @id @default(autoincrement())
  hotel_id          Int
  hotel             hotels            @relation(fields: [hotel_id], references: [hotel_id], onDelete: Cascade)
  type_name         String            @db.VarChar(50)
  description       String?           @db.Text
  base_price        Decimal           @db.Decimal(10, 2) // Base price for full-day
  max_occupancy     Int
  room_hourly_rates room_hourly_rates[] // One-to-many
}

// Rooms table
// model rooms {
//   room_id      Int          @id @default(autoincrement())
//   hotel_id     Int
//   room_type_id Int
//   hotel        hotels       @relation(fields: [hotel_id], references: [hotel_id], onDelete: Cascade)
//   room_type    room_types   @relation(fields: [room_type_id], references: [room_type_id], onDelete: Restrict)
//   room_number  String       @db.VarChar(10)
//   floor        Int?
//   status       String       @default("available") // Enum: available, occupied, maintenance
//   last_cleaned DateTime?    @db.Timestamp
//   reservations reservations[] // One-to-many
// }

model reservations {
  reservation_id    Int          @id @default(autoincrement())
  hotel_id          Int
  user_id          Int
  hotel             hotels       @relation(fields: [hotel_id], references: [hotel_id], onDelete: Cascade)
  guest             users       @relation(fields: [user_id], references: [userId], onDelete: Restrict)
  check_in_datetime  DateTime?   
  check_out_datetime DateTime?    
  total_amount      Decimal      @db.Decimal(10, 2)
  booking_type      String       @default("hourly") // Enum: hourly, fullday
  duration_hours    Int          // 2, 6, 8, 24 (validate in app)
  status            String       @default("pending") // Enum: confirmed, pending, cancelled, checked_in, checked_out
  created_at        DateTime     @default(now()) @db.Timestamp
  deletedAt       DateTime?
  bills             bills[]      // One-to-many
}

// Room Hourly Rates table
model room_hourly_rates {
  hourly_rate_id Int      @id @default(autoincrement())
  room_type_id   Int
  hotel_id       Int
  room_type      room_types @relation(fields: [room_type_id], references: [room_type_id], onDelete: Restrict)
  hotel          hotels     @relation(fields: [hotel_id], references: [hotel_id], onDelete: Cascade)
  duration_hours Int       // 2, 6, 8, 24 (validate in app)
  rate_per_hour  Decimal   @db.Decimal(10, 2)
  valid_from     DateTime  @default(now()) @db.Timestamp
  valid_until    DateTime? @db.Timestamp
  @@unique([room_type_id, hotel_id, duration_hours])
}

model bills {
  bill_id        Int       @id @default(autoincrement())
  reservation_id Int
  user_id       Int
  reservation    reservations @relation(fields: [reservation_id], references: [reservation_id], onDelete: Cascade)
  user          users    @relation(fields: [user_id], references: [userId], onDelete: Restrict)
  total_amount   Decimal   @db.Decimal(10, 2)
  issue_date     DateTime  @default(now()) @db.Timestamp
  payment_status String    @default("pending") // Enum: pending, paid, partially_paid
  payment_method String?   // Enum: cash, credit_card, online, other
}


